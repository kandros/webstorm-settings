<templateSet group="React">
  <template name="componentClass" value="import React, {Component, PropTypes} from 'react';&#10;&#10;class $CLASSNAME$ extends Component {&#10;  static propTypes = {}&#10;  render() {&#10;    return (&#10;      &lt;div&gt;&#10;        $CLASSNAME$&#10;      &lt;/div&gt;&#10;    )&#10;  }&#10;}&#10;&#10;export default $CLASSNAME$;" description="component class" toReformat="true" toShortenFQNames="true">
    <variable name="CLASSNAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="ipt" value="import ImmutablePropTypes from 'react-immutable-proptypes';" description="import react-immutable-proptypes" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="spt" value="static propTypes = {&#10;  $cursor$&#10;}" description="static propTypes" toReformat="true" toShortenFQNames="true">
    <variable name="cursor" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_STATEMENT" value="false" />
    </context>
  </template>
  <template name="mapstate" value="const mapStateToProps = (state) =&gt; {&#10;  return {&#10;    $cursor$&#10;  }&#10;};" description="mapStateToProps" toReformat="true" toShortenFQNames="true">
    <variable name="cursor" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="dumb" value="import React, {PropTypes} from 'react';&#10;&#10;const $componentName$ = ({...props}) =&gt; (&#10;    &lt;div {...props}&gt;&#10;       $componentName$ &#10;    &lt;/div&gt;  &#10;);&#10;&#10;$componentName$.propTypes = {};&#10;export default $componentName$;" description="dumb component" toReformat="true" toShortenFQNames="true">
    <variable name="componentName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JSX_HTML" value="true" />
    </context>
  </template>
  <template name="connectedComponentClass" value="import React, {Component, PropTypes} from 'react';&#10;import {connect} from 'react-redux';&#10;&#10;class $CLASSNAME$ extends Component {&#10;  static propTypes = {}&#10;  render() {&#10;    return (&#10;      &lt;div&gt;&#10;        $CLASSNAME$&#10;      &lt;/div&gt;&#10;    )&#10;  }&#10;}&#10;&#10;const mapStateToProps = (state) =&gt; ({&#10;    prop: state.get('prop'),&#10;});&#10;&#10;export default connect(mapStateToProps)($CLASSNAME$);" description="redux connected component class" toReformat="true" toShortenFQNames="true">
    <variable name="CLASSNAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="reducer" value="const $NAME$ = (state = initialState, action) =&gt; {&#10;    switch (action.type) {&#10;        case 'CHANGE_ME':&#10;            return state;&#10;        default:&#10;            return state;&#10;    }&#10;}" description="reducer" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>